
2.3-1
3 41 52 26 38 57 9 49

3 41 | 26 52 | 38 57 | 9 49

3 26 41 52 | 9 38 49 57 

3 9 26 38 41 49 52 57


2.3-3
//NOTE: verify that this is correct 
Given:
T(n)
= 2; if n = 2
= 2T(n/2) + n; if n = 2^k for k>1

Prove: T(n) = n log2 n

*
Recursion tree
T(n)
=
n
T(n/2) T(n/2)
=
n
n/2 n/2
T(n/4) T(n/4) T(n/4) T(n/4)
=
n               // 1 * n
n/2 n/2             // n
n/4 n/4 n/4 n/4         // n
...
2 2 2 2 ... 2 2 2 2  // 2*n/2 = n

For 8:
0 16
1 8 8
2 4 4 4 4
3 2 2 2 2 2 2 2 2

Each level contains 2^i and each node cost (n/2^i) -> level i cost is n
Last level contains n/2 nodes.

Let n=2 then  D(recursion tree depth)=1 if D = log2 2^1 = 1;

Hypothise D = log2 n = log2 2^k
if n=2^k; D = log2 2^k = k;
if n=2^(k+1); D=log2 2^(k+1) = k + 1; on one level more
Induction step is satisfied.
T(n) = n log2 n

2.3-4

RECURSIVIE-INSERTION-SORT(A,n)
	if n=1
		return
	else
		RECURSIVIE-INSERTION-SORT(A,n-1)
		INSERT(A,n)

// 1..n - sorted
INSERT(A,n)
	i=n
	key=A[i+1]
	while i>=1 AND A[i]>key
		A[i]=A[i+1]
		i=i-1
	A[i]=key
	`
T(n)
= O(1) if n=1
= T(n-1) + cn

5 cn
4 cn
3 cn
2 cn 
1 cn
n

n^2 => the same as iterative


2.3-5