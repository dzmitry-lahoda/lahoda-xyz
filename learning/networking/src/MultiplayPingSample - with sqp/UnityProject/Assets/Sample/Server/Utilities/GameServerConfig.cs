using System;
using System.IO;
using Unity.Networking.Transport;
using Unity.Ucg.Usqp;
using UnityEngine;

namespace MultiplayPingSample.Server
{
    public static class GameServerConfig
    {
        const string k_DefaultBuildId = @"Generated at run time";

        public static Config GetConfig(Config baseConfig = null)
        {
            // Load ping server overrides from command-line and do config validation
            //  Order of variable priority (Low to high):
            //   1. Hard-coded defaults
            //   2. Config object passed in on server construction
            //   3. Config object loaded through `-config` arguments
            //   4. All command-line arguments (`-ip`, `-port`, etc.) other than `-config`

            // Load config from provided base config (or defaults if not present)
            var config = baseConfig ?? new Config();

            // Override defaults + game object values from config file if present
            UpdateConfigUsingConfigFile(ref config);

            // Set build ID if not specified
            UpdateConfigWithUnityBuildId(ref config);

            // Override config values with values passed in from command-line
            UpdateConfigUsingProcessArgs(ref config);

            // Validate the resulting config
            ValidateConfig(config);

            // Print the config to debug out
            PrintConfig(config);

            // Return the resulting config
            return config;
        }

        static void PrintConfig(Config config)
        {
            Debug.Log("Attempting to start Ping Server with the following configuration:" +
                $"\n{nameof(config.IpAddress)}: {config.IpAddress}" +
                $"\n{nameof(config.Info.Port)}: {config.Info.Port}" +
                $"\n{nameof(config.SqpPort)}: {config.SqpPort}" +
                $"\n{nameof(config.MultiplayConfigPath)}: {config.MultiplayConfigPath}" +
                $"\n{nameof(config.Info.ServerName)}: {config.Info.ServerName}" +
                $"\n{nameof(config.Info.BuildId)}: {config.Info.BuildId}" +
                $"\n{nameof(config.Info.Map)}: {config.Info.Map}" +
                $"\n{nameof(config.Info.GameType)}: {config.Info.GameType}" +
                $"\n{nameof(config.Info.MaxPlayers)}: {config.Info.MaxPlayers}" +
                $"\n{nameof(config.Info.CurrentPlayers)}: {config.Info.CurrentPlayers}"
            );
        }

        static void UpdateConfigWithUnityBuildId(ref Config config)
        {
            var initialBuildId = config.Info.BuildId;

            // If user didn't set a custom build ID, use the one generated by Unity
            if (config.Info.BuildId.Equals(k_DefaultBuildId))
                config.Info.BuildId = initialBuildId;
        }

        static void UpdateConfigUsingConfigFile(ref Config config)
        {
            // Read or write config file depending on arguments specified
            if (CommandLine.TryGetCommandLineArgValue("-serverconfig", out string configFilePath))
                config = ReadServerConfigFile(configFilePath);
        }

        static void UpdateConfigUsingProcessArgs(ref Config config)
        {
            CommandLine.TryUpdateVariableWithArgValue(ref config.Info.Port, "-port");
            CommandLine.TryUpdateVariableWithArgValue(ref config.IpAddress, "-ip");
            CommandLine.TryUpdateVariableWithArgValue(ref config.SqpPort, "-query_port");
            CommandLine.TryUpdateVariableWithArgValue(ref config.MultiplayConfigPath, "-config");
        }

        static void ValidateConfig(Config config)
        {
            // Validate that ports are valid
            if (config.SqpPort == config.Info.Port)
                throw new ArgumentException("-port and -query_port cannot be the same");

            // Try to create a valid endpoint from the included IP and port
            if (!NetworkEndPoint.TryParse(config.IpAddress, config.Info.Port, out var throwaway))
                throw new ArgumentException("server IP address was not valid");
        }

        // Try to read a config file - will throw exceptions if it fails
        static Config ReadServerConfigFile(string serverConfigFilePath)
        {
            try
            {
                Config configFromFile;

                using (var file = new FileStream(serverConfigFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite | FileShare.Delete))
                using (var reader = new StreamReader(file))
                {
                    configFromFile = JsonUtility.FromJson<Config>(reader.ReadToEnd());
                }

                if (configFromFile != null)
                {
                    // Overwrite existing configuration information with the new config data
                    var config = configFromFile;
                    Debug.Log($"Server config file loaded from {serverConfigFilePath}.");
                    return config;
                }

                // Trying to load a config file and failing should abort the process in production
                throw new ArgumentException("Unable to load server configuration file - could not deserialize data.");
            }
            catch (Exception e)
            {
                Debug.LogError("Unable to load server configuration file due to exception: " + e.Message);
                throw;
            }
        }
        
        // Try to write an example config file if requested
        [RuntimeInitializeOnLoadMethod]
        static void WriteExampleConfigFile()
        {
            if (!CommandLine.TryGetCommandLineArgValue("-exampleconfig", out string examplePath))
                return;

            try
            {
                using (var writer = new StreamWriter(examplePath, false))
                {
                    writer.Write(JsonUtility.ToJson(new Config(), true));
                }

                Debug.Log("Wrote example config file to current directory.");
            }
            catch (Exception e)
            {
                Debug.LogWarning("Unable to write example configuration file due to exception.");
                Debug.LogException(e);
            }
        }

        // Initialization data which can be edited in the inspector
        [Serializable]
        public class Config
        {
            public ServerInfo.Data Info = new ServerInfo.Data
            {
                BuildId = k_DefaultBuildId,
                CurrentPlayers = 0,
                GameType = "Ping Game",
                Map = "Ping Map",
                MaxPlayers = 16,
                Port = 9000,
                ServerName = "Ping Server"
            };
            public string IpAddress = "0.0.0.0";
            public ushort SqpPort = 9010;
            public string MultiplayConfigPath = "config.json";
        }
    }
}
